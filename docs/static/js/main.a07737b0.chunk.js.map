{"version":3,"sources":["images/Rick_and_Morty.png","components/Filters.js","components/CharacterCard.js","components/CharacterList.js","components/CharacterDetail.js","components/Header.js","components/App.js","services/getDataFromApi.js","serviceWorker.js","index.js"],"names":["module","exports","Filters","props","className","onSubmit","ev","preventDefault","type","placeholder","name","value","onChange","data","target","handleInputText","CharacterCard","to","character","id","src","image","alt","title","species","CharacterList","characterList","characters","map","key","length","searchFilter","CharacterDetail","undefined","border","status","planet","episodes","Header","logo","App","useState","setCharacters","setSearchFilter","useEffect","fetch","then","response","json","results","el","toString","origin","episode","sort","el1","el2","localeCompare","filteredCharacters","filter","toUpperCase","includes","exact","path","render","characterId","match","params","foundCharacter","find","char","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a07737b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rick_and_Morty.75509f2e.png\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/Filters.scss';\r\n\r\nfunction Filters(props) {\r\n  const handleInputText = (ev) => {\r\n    ev.preventDefault();\r\n    const data = {\r\n      name: 'search',\r\n      value: ev.target.value,\r\n    };\r\n    props.handleInputText(data);\r\n  };\r\n\r\n  //evito que se envíe el formulario al presionar la tecla intro\r\n  const handleSubmit = (ev) => {\r\n    ev.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <form className=\"Filter\" onSubmit={handleSubmit}>\r\n      <label>\r\n        <input className=\"Filter__text\" type=\"text\" placeholder=\"Search a character\" name=\"search\" value={props.value} onChange={handleInputText}/>\r\n      </label>\r\n    </form>\r\n  );\r\n}\r\n\r\n// Aquí defino las propTypes\r\nFilters.propTypes = {\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default Filters;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/CharacterCard.scss';\r\n\r\nfunction CharacterCard(props) {\r\n  return (\r\n    <Link to={`/character/${props.character.id}`}>\r\n      <li className=\"CharacterCard\">\r\n        <img className=\"CharacterCard__image\" src={props.character.image} alt={props.character.name} title={`Picture of ${props.character.name}`} />\r\n        <h3 className=\"CharacterCard__name\">{props.character.name}</h3>\r\n        <p className=\"CharacterCard__species\">{props.character.species}</p>\r\n      </li>\r\n    </Link>\r\n  );\r\n}\r\n\r\n// Aquí defino las propTypes\r\nCharacterCard.propTypes = {\r\n  character: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    image: PropTypes.string,\r\n    name: PropTypes.string,\r\n    species: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default CharacterCard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CharacterCard from './CharacterCard';\r\nimport '../styles/CharacterList.scss';\r\n\r\nfunction CharacterList(props) {\r\n  let characterList = props.characters.map((character) => {\r\n    return <CharacterCard key={character.id} character={character} />;\r\n  });\r\n\r\n  if (characterList.length > 0) {\r\n    return (\r\n      <section className=\"CharacterList-section\">\r\n        <ul className=\"CharacterList\">{characterList}</ul>\r\n      </section>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"CharacterList__notfound\">\r\n        <p>There is no any character that matches with the word </p>\r\n        <span className=\"CharacterList__notfound--word\"> \"{props.searchFilter}\"</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Aquí defino las propTypes\r\nCharacterList.propTypes = {\r\n  characters: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\nexport default CharacterList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/CharacterDetail.scss';\r\n\r\nfunction CharacterDetail(props) {\r\n  if (props.character === undefined) {\r\n    return (\r\n      <div className=\"CharacterDetail\">\r\n        <Link className=\"CharacterDetail__link\" to=\"/\">\r\n          Back <i className=\"fas fa-chevron-circle-left\"></i>\r\n        </Link>\r\n        <div className=\"CharacterDetail__info--notFound\">\r\n          <img src=\"https://fontmeme.com/permalink/200423/8c91dbb30799b4d9be208a09e5ecf9b4.png\" alt=\"fuente-senyum-sokmo-deh\" border=\"0\" />\r\n          <img src=\"https://img.icons8.com/cute-clipart/64/000000/nothing-found.png\" alt=\"Character not found\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"CharacterDetail\">\r\n        <Link className=\"CharacterDetail__link\" to=\"/\">\r\n          Back <i className=\"fas fa-chevron-circle-left\"></i>\r\n        </Link>\r\n        <div className=\"CharacterDetail__info\">\r\n          <img className=\"CharacterDetail__image\" src={props.character.image} alt={`Foto de ${props.character.name}`} />\r\n          <div>\r\n            <h3>{props.character.name}</h3>\r\n            <p>Status: {props.character.status === 'Alive' ? <i className=\"fas fa-heart\"></i> : props.character.status === 'Dead' ? <i className=\"fas fa-skull-crossbones\"></i> : <i className=\"fas fa-question\"></i>}</p>\r\n            <p>Species: {props.character.species === 'Alien' ? <i className=\"fab fa-reddit-alien\"></i> : <i className=\"fas fa-user-alt\"></i>}</p>\r\n            <p>Origin: {props.character.planet}</p>\r\n            <p>Episodes: {props.character.episodes}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Aquí defino las propTypes\r\nCharacterDetail.propTypes = {\r\n  character: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    name: PropTypes.string,\r\n    species: PropTypes.string,\r\n    status: PropTypes.string,\r\n    planet: PropTypes.string,\r\n    episodes: PropTypes.number,\r\n  }),\r\n};\r\n\r\nexport default CharacterDetail;\r\n","import React from 'react';\r\nimport logo from '../images/Rick_and_Morty.png';\r\nimport '../styles/Header.scss';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"Header\">\r\n      <img src={logo} alt=\"Rick and Morty\" title=\"Rick and Morty\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport '../styles/App.scss';\nimport Filters from './Filters';\nimport ChatacterList from './CharacterList';\nimport CharacterDetail from './CharacterDetail';\nimport { fetchCharacters } from '../services/getDataFromApi';\nimport Header from './Header';\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n  const [searchFilter, setSearchFilter] = useState('');\n\n  //petición de datos al api y seteo al estado\n  useEffect(() => {\n    fetchCharacters().then((data) => setCharacters(data));\n  }, []);\n\n  //event handler\n  const handleInputText = (data) => {\n    setSearchFilter(data.value);\n  };\n\n  //filter and render\n  const filteredCharacters = characters.filter((character) => {\n    return character.name.toUpperCase().includes(searchFilter.toUpperCase());\n  });\n\n  //character detail with React Router\n  const renderCharacterDetail = (props) => {\n    const characterId = props.match.params.characterId;\n    const foundCharacter = characters.find((char) => {\n      return char.id === characterId;\n    });\n    return <CharacterDetail character={foundCharacter} />;\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <Filters handleInputText={handleInputText} value={searchFilter} />\n          <ChatacterList characters={filteredCharacters} searchFilter={searchFilter} />\n        </Route>\n        <Route exact path=\"/character/:characterId\" render={renderCharacterDetail} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const ENDPOINT = 'https://raw.githubusercontent.com/Adalab/rick-y-morty/master/data/rick-y-morty.json';\r\n\r\nconst fetchCharacters = () =>\r\n  fetch(ENDPOINT)\r\n    .then((response) => response.json())\r\n    .then((data) => {    \r\n      let results = [];\r\n      results = data.results\r\n      .map((el) => ({\r\n        id: el.id.toString(),\r\n        name: el.name,\r\n        status: el.status,\r\n        species: el.species,\r\n        image: el.image,\r\n        planet: el.origin.name,\r\n        episodes: el.episode.length\r\n      }))\r\n      .sort((el1, el2) => (el1.name.localeCompare (el2.name)))\r\n      return results;\r\n    });\r\n\r\nexport { fetchCharacters };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n    <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}