{"version":3,"sources":["images/Rick_and_Morty.png","components/Filters.js","components/CharacterCard.js","components/CharacterList.js","components/CharacterDetail.js","components/Header.js","components/App.js","services/getDataFromApi.js","serviceWorker.js","index.js"],"names":["module","exports","Filters","props","className","type","placeholder","name","value","onChange","ev","preventDefault","data","target","handleInputText","ChatacterCard","to","character","id","src","image","alt","species","ChatacterList","chatacterList","characters","map","key","CharacterDetail","console","log","status","planet","episodes","Header","logo","title","App","useState","setCharacters","searchFilter","setSearchFilter","useEffect","fetch","then","response","json","results","el","origin","episode","length","filteredCharacters","filter","toUpperCase","includes","exact","path","render","characterId","match","params","foundCharacter","find","char","parseInt","undefined","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d2f88f80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rick_and_Morty.75509f2e.png\";","import React from 'react';\r\nimport '../styles/Filters.css';\r\n\r\nfunction Filters(props) {\r\n  // console.log(props);\r\n  \r\nconst handleInputText = (ev) => {\r\n  ev.preventDefault();\r\n  const data = {\r\n    name: 'search',\r\n    value: ev.target.value    \r\n  }\r\n  props.handleInputText(data)\r\n}\r\n\r\n  return (\r\n    <form className=\"Filters\">\r\n      <label>\r\n        <input className=\"filter-text\" type=\"text\" placeholder=\"Introduce el nombre de un personaje\" name=\"search\" value={props.value} onChange={handleInputText}/>\r\n      </label>\r\n    \r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Filters;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/CharacterCard.css';\r\n\r\nfunction ChatacterCard(props) {\r\n  return (\r\n    <Link to={`/character/${props.character.id}`}>\r\n      <li className=\"ChatacterCard\">\r\n        <img className=\"CharacterCard-image\" src={props.character.image} alt={`Foto de ${props.character.name}`} />\r\n        <h3 className=\"CharacterCard-name\">{props.character.name}</h3>\r\n        <p className=\"CharacterCard-species\">{props.character.species}</p>\r\n      </li>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default ChatacterCard;\r\n","import React from 'react';\r\nimport ChatacterCard from './CharacterCard';\r\nimport '../styles/CharacterList.css';\r\n\r\nfunction ChatacterList(props) {\r\n  let chatacterList = props.characters.map((character) => {\r\n  return <ChatacterCard key={character.id} character={character} />   \r\n  });\r\n\r\n  return (\r\n    <ul className=\"ChatacterList\">\r\n      {chatacterList}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default ChatacterList;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/CharacterDetail.css';\r\n\r\nfunction CharacterDetail(props) {\r\n  console.log(props);\r\n\r\n  return (\r\n    <div className=\"CharacterDetail\">\r\n      <Link className=\"Character-link\" to=\"/\"> Volver </Link>\r\n      <div className=\"Character-info\">\r\n        <img className=\"Character-image\" src={props.character.image} alt={`Foto de ${props.character.name}`} />\r\n        <div>\r\n          <h3>{props.character.name}</h3>\r\n          <p>Status: {props.character.status}</p>\r\n          <p>Species: {props.character.species}</p>\r\n          <p>Origin: {props.character.planet}</p>\r\n          <p>Episodes: {props.character.episodes}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterDetail;\r\n","import React from 'react';\r\nimport logo from '../images/Rick_and_Morty.png';\r\nimport '../styles/Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"Header\">\r\n        <img src={logo} alt=\"Rick and Morty\" title=\"Rick and Morty\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport '../styles/App.css';\nimport Filters from './Filters';\nimport ChatacterList from './CharacterList';\nimport CharacterDetail from './CharacterDetail';\nimport { fetchCharacters } from '../services/getDataFromApi';\nimport Header from './Header';\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n  const [searchFilter, setSearchFilter] = useState('');\n\n  useEffect(() => {\n    fetchCharacters().then((data) => setCharacters(data));\n  }, []);\n\n\n  //event handler\n  const handleInputText = (data) => {\n    setSearchFilter(data.value);\n  };\n\n  //filter and render\n\n  const filteredCharacters = characters.filter((character) => {\n    return character.name.toUpperCase().includes(searchFilter.toUpperCase());\n  });\n\n\n  //character detail with React Router\n\n  const renderCharacterDetail = (props) => {\n    // debugger;\n    const characterId = props.match.params.characterId;\n    const foundCharacter = characters.find((char) => {\n      return char.id === parseInt(characterId);\n    });\n    console.log(foundCharacter, characterId);\n    if (foundCharacter !== undefined) {\n      return <CharacterDetail character={foundCharacter} />;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Switch>\n        <Route exact path=\"/\">\n          <Filters handleInputText={handleInputText} value={searchFilter} />\n          <ChatacterList characters={filteredCharacters} />\n        </Route>\n        <Route exact path=\"/character/:characterId\" render={renderCharacterDetail} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const ENDPOINT = 'https://raw.githubusercontent.com/Adalab/rick-y-morty/master/data/rick-y-morty.json';\r\n\r\nconst fetchCharacters = () =>\r\n  fetch(ENDPOINT)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n        // console.log(data);        \r\n      let results = [];\r\n      results = data.results.map((el) => ({\r\n        id: el.id,\r\n        name: el.name,\r\n        status: el.status,\r\n        species: el.species,\r\n        image: el.image,\r\n        planet: el.origin.name,\r\n        episodes: el.episode.length\r\n      }));\r\n      return results;\r\n    });\r\n\r\nexport { fetchCharacters };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n    <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}